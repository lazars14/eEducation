create database eeducation;

use eeducation;

create table class
(
	id int primary key auto_increment not null,
	name varchar(50),
	numOfYears int
);

create table student
(
	id int primary key auto_increment not null,
	indexNumber varchar(15) unique,
	firstname varchar(20),
	lastname varchar(20),
	accountNumber char(18) unique,
	referenceNumber varchar(30) unique,
	studYear int,
	studYearOrdNum int,
	email varchar(30) unique,
	sPassword varchar(20),
	classId int,
	espbPoints int,

	Foreign Key (classId) References class(id)
);

create table rank
(
	id int primary key auto_increment not null,
	name varchar(30)
);

create table teacher
(
	id int primary key auto_increment not null,
	firstname varchar(20),
	lastname varchar(20),
	email varchar(30) unique,
	sPassword varchar(20),
	rank integer,

	Foreign Key (rank) References rank(id)
);

create table course
(
	id int primary key auto_increment not null,
	name varchar(50),
	description varchar(1000),
	espbPoints int,
	teacherId int,

	Foreign Key (teacherId) References teacher(id)
);

create table student_attends_course
(
	id int primary key auto_increment not null,
	studentId int,
	courseId int,

	Foreign Key (studentId) References student(id),
	Foreign Key (courseId) References course(id)
);

create table teacher_teaches_course
(
	id int primary key auto_increment not null,
	teacherId int,
	courseId int,

	Foreign Key (teacherId) References teacher(id),
	Foreign Key (courseId) References course(id)
);

create table course_lesson
(
	id int primary key auto_increment not null,
	name varchar(50),
	description varchar(100),
	courseId int,

	Foreign Key (courseId) References course(id)	
);

create table student_document
(
	id int primary key auto_increment not null,
	documentName varchar(30),
	documentType varchar(30),
	documentURL varchar(200),
	mimeType varchar(30),
	studentId int,
	courseId int,
	
	Foreign Key (studentId) References student(id),
	Foreign Key (courseId) References course(id)
);

create table course_file
(
	id int primary key auto_increment not null,
	documentName varchar(30),
	documentType varchar(30),
	documentURL varchar(200),
	mimeType varchar(30),
	courseLessonId int,
    courseId int,
	
	Foreign Key (courseLessonId) References course_lesson(id),
    Foreign Key (courseId) References course(id)
);

create table payment
(
	id int primary key auto_increment not null,
	studentId int,
	amount float,
	cause varchar(100),
	paymentDate datetime,
	owes bit,
	
	Foreign Key (studentId) References student(id)
);

create table colloquium
(
	id int primary key auto_increment not null,
	courseId int,
	maxPoints float,
	examType varchar(30),
	examDateTime datetime,

	Foreign Key (courseId) References course(id)
);

create table colloquium_result
(
	id int primary key auto_increment not null,
	points float,
	colloquiumId int,
	studentId int,
	documentId int,		

	Foreign Key (colloquiumId) References colloquium(id),
	Foreign Key (studentId) References student(id),
	Foreign Key (documentId) References student_document(id)
);

create table grade
(
	id int primary key auto_increment not null,
	points float,
	grade int,
	courseId int,
	studentId int,

	Foreign Key (courseId) References course(id),
	Foreign Key (studentId) References student(id)
);

create table exam_period
(
	id int primary key auto_increment not null,
	name varchar(50),
	startDate datetime,
	endDate datetime
);

create table exam_term
(
	id int primary key auto_increment not null,
	examDate datetime,
	classRoom varchar(100),
	courseId int,
	examPeriodId int,
	
	Foreign Key (courseId) References course(id),
	Foreign Key (examPeriodId) References exam_period(id)
);

create table student_exam_entry
(
	id int primary key auto_increment not null,	
	studentId int,
	examTermId int,
	gradeId int,

	Foreign Key (studentId) References student(id),
	Foreign Key (examTermId) References exam_term(id),
	Foreign Key (gradeId) References grade(id)	
);

create table notification
(
	id int primary key auto_increment not null,
	message varchar(300),
    nDate datetime,
	courseId int,
	documentId int,
	seen bit,
	studentId int,

	Foreign Key (courseId) References course(id),
	Foreign Key (documentId) References course_file(id),
	Foreign Key (studentId) References student(id)
);